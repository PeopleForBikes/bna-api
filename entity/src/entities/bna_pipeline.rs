//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "bna_pipeline")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub state_machine_id: Uuid,
    pub step: Option<String>,
    pub sqs_message: Option<Json>,
    pub fargate_price_id: Option<i32>,
    pub fargate_task_arn: Option<String>,
    pub s3_bucket: Option<String>,
    pub status: String,
    pub start_time: TimeDateTimeWithTimeZone,
    pub end_time: Option<TimeDateTimeWithTimeZone>,
    pub torn_down: Option<bool>,
    pub results_posted: Option<bool>,
    pub cost: Option<Decimal>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::bna_pipeline_status::Entity",
        from = "Column::Status",
        to = "super::bna_pipeline_status::Column::Status",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    BnaPipelineStatus,
    #[sea_orm(
        belongs_to = "super::bna_pipeline_step::Entity",
        from = "Column::Step",
        to = "super::bna_pipeline_step::Column::Step",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    BnaPipelineStep,
    #[sea_orm(
        belongs_to = "super::fargate_price::Entity",
        from = "Column::FargatePriceId",
        to = "super::fargate_price::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    FargatePrice,
}

impl Related<super::bna_pipeline_status::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BnaPipelineStatus.def()
    }
}

impl Related<super::bna_pipeline_step::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BnaPipelineStep.def()
    }
}

impl Related<super::fargate_price::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FargatePrice.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
