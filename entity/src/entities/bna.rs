//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "bna")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip_deserializing)]
    pub id: i32,
    #[sea_orm(column_type = "Double")]
    pub bna_core_services: f64,
    #[sea_orm(column_type = "Double")]
    pub bna_core_services_dentists: f64,
    #[sea_orm(column_type = "Double", nullable)]
    pub bna_core_services_doctors: Option<f64>,
    #[sea_orm(column_type = "Double")]
    pub bna_core_services_grocery: f64,
    #[sea_orm(column_type = "Double", nullable)]
    pub bna_core_services_hospitals: Option<f64>,
    #[sea_orm(column_type = "Double")]
    pub bna_core_services_pharmacies: f64,
    #[sea_orm(column_type = "Double")]
    pub bna_core_services_social_services: f64,
    #[sea_orm(column_type = "Double")]
    pub bna_opportunity: f64,
    #[sea_orm(column_type = "Double")]
    pub bna_opportunity_employment: f64,
    #[sea_orm(column_type = "Double")]
    pub bna_opportunity_higher_education: f64,
    #[sea_orm(column_type = "Double")]
    pub bna_opportunity_k12_education: f64,
    #[sea_orm(column_type = "Double")]
    pub bna_opportunity_technical_vocational_college: f64,
    #[sea_orm(column_type = "Double")]
    pub bna_overall_score: f64,
    #[sea_orm(column_type = "Double")]
    pub bna_people: f64,
    #[sea_orm(column_type = "Double")]
    pub bna_recreation: f64,
    #[sea_orm(column_type = "Double")]
    pub bna_recreation_community_centers: f64,
    #[sea_orm(column_type = "Double")]
    pub bna_recreation_parks: f64,
    #[sea_orm(column_type = "Double")]
    pub bna_recreation_trails: f64,
    #[sea_orm(column_type = "Double")]
    pub bna_retail: f64,
    pub bna_rounded_score: i32,
    #[sea_orm(column_type = "Double")]
    pub bna_transit: f64,
    pub city_id: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::city::Entity",
        from = "Column::CityId",
        to = "super::city::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    City,
}

impl Related<super::city::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::City.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
