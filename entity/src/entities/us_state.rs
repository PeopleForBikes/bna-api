//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "us_state")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub name: String,
    #[sea_orm(unique)]
    pub abbrev: String,
    #[sea_orm(unique)]
    pub fips_code: String,
    pub speed_limit: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::state_region_crosswalk::Entity")]
    StateRegionCrosswalk,
}

impl Related<super::state_region_crosswalk::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StateRegionCrosswalk.def()
    }
}

impl Related<super::bna_region::Entity> for Entity {
    fn to() -> RelationDef {
        super::state_region_crosswalk::Relation::BnaRegion.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::state_region_crosswalk::Relation::UsState.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
