//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "state_region_crosswalk")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub state: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub region: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::bna_region::Entity",
        from = "Column::Region",
        to = "super::bna_region::Column::Name",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    BnaRegion,
    #[sea_orm(
        belongs_to = "super::us_state::Entity",
        from = "Column::State",
        to = "super::us_state::Column::Name",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    UsState,
}

impl Related<super::bna_region::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BnaRegion.def()
    }
}

impl Related<super::us_state::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UsState.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
