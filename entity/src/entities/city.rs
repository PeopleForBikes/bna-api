//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "city")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub city_id: Uuid,
    pub country: String,
    #[sea_orm(column_type = "Double")]
    pub latitude: f64,
    #[sea_orm(column_type = "Double")]
    pub longitude: f64,
    pub name: String,
    pub region: String,
    pub state: String,
    pub state_abbrev: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::census::Entity")]
    Census,
    #[sea_orm(has_many = "super::ranking::Entity")]
    Ranking,
    #[sea_orm(has_many = "super::speed_limit::Entity")]
    SpeedLimit,
    #[sea_orm(has_many = "super::summary::Entity")]
    Summary,
}

impl Related<super::census::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Census.def()
    }
}

impl Related<super::ranking::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ranking.def()
    }
}

impl Related<super::speed_limit::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SpeedLimit.def()
    }
}

impl Related<super::summary::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Summary.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
