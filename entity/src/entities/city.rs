//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "city")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub census_fips_code: i32,
    #[sea_orm(column_type = "Double")]
    pub census_latitude: f64,
    #[sea_orm(column_type = "Double")]
    pub census_longitude: f64,
    pub census_population: i32,
    pub city: String,
    pub country: String,
    pub pop_size: String,
    pub rank: i32,
    pub rank_country: i32,
    pub rank_country_size: i32,
    pub rank_size: i32,
    pub rank_state: i32,
    pub region: String,
    pub residential_speed_limit: i32,
    pub state: String,
    pub state_full: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::bna::Entity")]
    Bna,
}

impl Related<super::bna::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Bna.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
