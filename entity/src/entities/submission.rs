//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "submission")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub first_name: String,
    pub last_name: String,
    pub occupation: Option<String>,
    pub organization: Option<String>,
    pub email: String,
    pub country: String,
    pub city: String,
    pub region: Option<String>,
    pub fips_code: String,
    pub consent: bool,
    pub status: String,
    pub created_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::approval_status::Entity",
        from = "Column::Status",
        to = "super::approval_status::Column::Status",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    ApprovalStatus,
    #[sea_orm(
        belongs_to = "super::country::Entity",
        from = "Column::Country",
        to = "super::country::Column::Name",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Country,
}

impl Related<super::approval_status::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ApprovalStatus.def()
    }
}

impl Related<super::country::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Country.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
